//
//  Library.h
//  d2Test
//
//  Created by echo on 13. 8. 13..
//  Copyright (c) 2013년 Noriter. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <CoreData/CoreData.h>
@interface Library : NSObject
{
    NSData* savedData;
    NSArray* savedArray;
    BytePtr savedPixels;
    int counted;
}

-(UIImage*)SaveDataAsImageByArray:(NSArray*)array;
-(NSArray*)LoadDataFromImage:(UIImage*)image;
@end




//
//  Library.m
//  d2Test
//
//  Created by echo on 13. 8. 13..
//  Copyright (c) 2013년 Noriter. All rights reserved.
//

#import "Library.h"
#import "bitset"
@implementation Library
/////////////////////////
//// MEMO
//// 1. 비트맵 초반부분에 "이건 어떤알고리즘썼다"같은걸 표시하도록.
//// 2. 알파값이 0이면 R,G,B값이 0으로 초기화되므로 알고리즘 설계시 주의!
////
////
////
////////////////
typedef enum
{
    ALGORITHM_DEFAULT_RGBA,
}ALGORITHM;
/// 1. ALGORITHM_DEFAULT_RGBA
/// RGBA 각 픽셀의 2^7, 2^6(최상위 2비트)를 특수비트로 지정한다.
/// text : R / 11 G / 11 B / 11 A / 01
/// data : R / 00 G / 00 B / 00 A / 11
/// final : 10
#define d_Algorithm ALGORITHM_DEFAULT_RGBA
#define d_MaximumTextLength 11
#define d_UITextColor [UIColor redColor]
-(UIImage*)SaveDataAsImageByArray:(NSArray*)array // + TEXT
{
    NSData* data = NULL;
    BytePtr bytes = NULL;
    uint bytesLength = 0;
    CGSize imageSize = CGSizeMake(0, 0); // square rate for width and height.
    BytePtr dataPixels = NULL; // which have pixels by data
    BytePtr textPixels = NULL; // which have pixels by text
    BytePtr imagePixels = NULL; // which have pixels by mixxing data, and text both. SHOULD MALLOC
    NSArray* textArray = [NSArray arrayWithObjects:[NSString stringWithFormat:@"AppName"],
                          [NSString stringWithFormat:@"Use"],
                          [NSString stringWithFormat:@"Who"],
                          [NSString stringWithFormat:@"2013-06-15"],
                          nil];
    //NSLog(@"%@",array);
    NSError *error = nil;
    data = [NSKeyedArchiver archivedDataWithRootObject:array];

    NSArray *AArray = [NSKeyedUnarchiver  unarchiveObjectWithData:data];
    savedArray = [AArray copy];
    
    if([AArray isEqualToArray:array])NSLog(@"Equal");
    NSArray *unar_array = [NSKeyedUnarchiver unarchiveObjectWithData:data];
    savedData = [NSData dataWithData:data];
    if([savedArray isEqualToArray:[NSKeyedUnarchiver unarchiveObjectWithData:data]]) NSLog(@"equal");
    if([AArray isEqualToArray:[NSKeyedUnarchiver unarchiveObjectWithData:data]]) NSLog(@"equal");
    if([array isEqualToArray: [NSKeyedUnarchiver unarchiveObjectWithData:data]]) NSLog(@"equal");
    //NSLog(@"achievd data : %@",data);
    //NSLog(@"savedData : %@",savedData);
    NSLog(@"%d",[data length]);
    bytesLength = [data length];
    bytes = (BytePtr)[data bytes];
    savedPixels = bytes;
    NSLog(@"After Achieve, first byte is : %d",bytes[0]);
    for(int i=0; i<100; i++)
        NSLog(@"%d : %d",i,bytes[i]);
    if([savedData isEqualToData:data] == YES)
        NSLog(@"equal");
    [self popBitCount:0 OrSaveBytes:YES SaveBytes:bytes ByteLength:bytesLength];
    
    // image width * height * 32bit >= bytesLength * 8bits
    // so, width = height = (int)sqrt(byteLength) + 1
    if(d_Algorithm == ALGORITHM_DEFAULT_RGBA)
    {
        imageSize.width = imageSize.height = ceilf(sqrt((bytesLength+1)*4.0f/3.0f / 4.0f)); // /4 : rgba
        NSLog(@"%f,%f ",imageSize.width, imageSize.height);
    }
    
    // if imageSize is too small?
    //    if(imageSize.width < StandardSize)
    
    // image size is big enough
    /// 1. Set Pixels on the dataPixels
    [self SetPixelsByDataPixels:&dataPixels
                     TextPixels:&textPixels
                    ImagePixels:&imagePixels
                      TextArray:textArray
                      ImageSize:imageSize];
    /*
     
    ///http://stackoverflow.com/questions/7235991/create-image-from-rgb-data///
    size_t width                    = imageSize.width;
    size_t height                   = imageSize.height;
    NSUInteger bytesPerPixel        = 4;
    NSUInteger bytesPerRow          = bytesPerPixel * width;
    NSUInteger bitsPerComponent     = 8;
    size_t bitsPerPixel             = 8*4;
    CGColorSpaceRef colorspace      = CGColorSpaceCreateDeviceRGB();
    CGBitmapInfo bitmapInfo         = kCGImageAlphaPremultipliedLast; 
    CGDataProviderRef provider      = CGDataProviderCreateWithData(NULL, imagePixels, (int)imageSize.width * imageSize.height, NULL);
  
    
    CGContextRef gtx = CGBitmapContextCreate(imagePixels, width, height, bitsPerComponent, 4*width, colorspace, kCGImageAlphaPremultipliedLast);

    /*
    
    /**/
    UIImage* finalImage = NULL;
    CGSize _imageSize = imageSize;
    UIGraphicsBeginImageContextWithOptions(_imageSize, NO, 1.0f);
    [d_UITextColor set];
    finalImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    CGImageRef imageRef = finalImage.CGImage;
    NSUInteger width = CGImageGetWidth(imageRef);
    NSUInteger height = CGImageGetHeight(imageRef);
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * width;
    NSUInteger bitsPerComponent = 8;
    
    
    for(int i=0; i<100; i++)
    {
        if((textPixels)[i] != 0) NSLog(@"DD%d %d",i,textPixels[i]);
    }
    BytePtr pixels = nullptr;
    pixels = (BytePtr) calloc(imageSize.height * imageSize.width * 4, sizeof(Byte));
    
    CGContextRef context = CGBitmapContextCreate(imagePixels, width, height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast);// | kCGBitmapByteOrder32Big);
    
    
    CGColorSpaceRelease(colorSpace);
    
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);
    
    for(int i=0; i<bytesLength; i++)
    {
        if((pixels)[i] != 0) NSLog(@"%d %d %d",(pixels)[i] == imagePixels[i],imagePixels[i], (pixels)[i]);
    }
    
    /**/
    /*
     size_t width                    = imageSize.width;
     size_t height                   = imageSize.height;
     NSUInteger bytesPerPixel        = 4;
     NSUInteger bytesPerRow          = bytesPerPixel * width;
     size_t bitsPerComponent         = 8;
     size_t bitsPerPixel             = 8*4;
     size_t bytesPerRow              = ((bitsPerComponent * width) / 8) * 4;
     CGColorSpaceRef colorspace      = CGColorSpaceCreateDeviceRGB();
     CGBitmapInfo bitmapInfo         = kCGImageAlphaPremultipliedLast;
     CGDataProviderRef provider      = CGDataProviderCreateWithData(NULL, imagePixels, (int)imageSize.width * imageSize.height, NULL);
     CGContextRef gtx = CGBitmapContextCreate(imagePixels, width, height, bitsPerComponent, 4*width, colorspace, kCGImageAlphaLast | kCGBitmapByteOrder32Big); //kCGImageAlphaPremultipliedLast);
     */
    
    // create the image:
    CGImageRef toCGImage = CGBitmapContextCreateImage(context);
    UIImage * uiimage = [[UIImage alloc] initWithCGImage:toCGImage];
    [self ImageToPixels:&pixels byImage:uiimage];
    for(int i=0; i<bytesLength; i++)
    {
        if((pixels)[i] != imagePixels[i])
        {
            NSLog(@"EE %d != %d  i( %d ) : %d , %d  -- rgba : %d ",pixels[i],
                                                imagePixels[i],
                                                i,
                                                i/4/(int)imageSize.width,
                                                (i/4)%(int)imageSize.width,
                                                i%4);
            if(i%4 == 2)
            {
                NSLog(@"a : %d == %d",pixels[i+1],imagePixels[i+1]);
            }
        }
    }
    
    return uiimage;
}
-(void)SetPixelsByDataPixels:(BytePtr*)pDataPixels
                  TextPixels:(BytePtr*)pTextPixels
                 ImagePixels:(BytePtr*)pImagePixels
                   TextArray:(NSArray*)textArray
                   ImageSize:(CGSize)imageSize;
{
    [self SetDataPixels:pDataPixels ImageSize:imageSize];
    [self SetTextPixels:pTextPixels TextArray:textArray ImageSize:imageSize];
    [self SetImagePixels:pImagePixels DataPixels:*pDataPixels TextPixels:*pTextPixels ImageSize:imageSize];
}

-(void)SetDataPixels:(BytePtr*)pDataPixels
           ImageSize:(CGSize)imageSize;
{
    ///DO MALLOC IMAGEPIXEL.
    // 32bit per pixel
    *pDataPixels = (BytePtr)malloc(sizeof(Byte) * 4 * (int)imageSize.width * imageSize.height+1);
    memset(*pDataPixels, 0, sizeof(Byte) * 4 * (int)imageSize.width * imageSize.height+1);
    
    
    for(int i=0; i+3<sizeof(Byte) * 4 * (int)imageSize.width * imageSize.height; i+=4)
    {
        if(d_Algorithm == ALGORITHM_DEFAULT_RGBA)
        {
            for(int l=0; l<4; l++)
            {
                int a = [self popBitCount:6 OrSaveBytes:false SaveBytes:NULL ByteLength:0];
                if(a == -1)
                {
                    (*pDataPixels)[i+l] = 0x80;
                }
                else
                {
                    (*pDataPixels)[i+l] = (Byte)a;
                }
            }
        }
        
        if(i==0) NSLog(@"first data pixel's 0 pixel = %d",(*pDataPixels)[0]);
    }
    NSLog(@"%d",(*pDataPixels)[1]);
}

-(int)popBitCount:(uint)count
       OrSaveBytes:(bool)isSaveBytes
         SaveBytes:(BytePtr)bytes
        ByteLength:(uint)byteLength
{
    static int* bitArray;
    static int length;
    static int counter = 0;
    
    if(isSaveBytes == YES)
    {
        bitArray = (int*)malloc(sizeof(int)*byteLength*8+1);
        length = byteLength * 8;
        for(int i = 0; i < byteLength; i++)
        {
            std::bitset<8>bs ((uint)bytes[i]);
            for(int l=0; l<8; l++)
                bitArray[i*8+(7-l)] = bs[l];
            
            if(i == 0) NSLog(@"first 8 bit on pop is 1:%d 2:%d 3:%d 4:%d 5:%d 6:%d 7:%d 8:%d",bitArray[0],bitArray[1],bitArray[2],bitArray[3],bitArray[4],bitArray[5],bitArray[6],bitArray[7]);
        }
        return 0;
    }
    
    
    //from bitmapMFC\bitmap.h | unsigned int GetBitsByPoppingWithNumber(std::list<bool> * bList, int number)
    unsigned int rt = 0;
	for(int i=0; i<count; i++)
	{
        rt*=2;
        if(counter < length)
		{
			if( bitArray[counter] == 1)
				rt += 1;
			counter++;
		}
        else
        {
            if(i == 0)
                return -1;
        }
	}    
	return rt;
    
}

-(void)SetTextPixels:(BytePtr*)pTextPixels
           TextArray:(NSArray*)textArray
           ImageSize:(CGSize)imageSize// what we need?
{
    [self drawTextArray:textArray TextPixels:pTextPixels ImageSize:imageSize];
}

///http://stackoverflow.com/questions/6992830/how-to-write-text-on-image-in-objective-c-iphone///
-(void) drawTextArray:(NSArray*) textArray
           TextPixels:(BytePtr*)pTextPixels
            ImageSize:(CGSize)imageSize
{
    UIImage* textImage = NULL;
    CGSize _imageSize = imageSize;
    _imageSize.width+= 0;
    _imageSize.height+= 0;
    UIGraphicsBeginImageContextWithOptions(_imageSize, NO, 1.0f);
    [d_UITextColor set];
    for(int i=0; i<textArray.count; i++)
    {
        NSString *text = textArray[i];
        //cut text in d_maximumLengthTExt
        UIFont* font = [UIFont systemFontOfSize:0.0];
        CGRect drawingRect = CGRectMake(0, _imageSize.height / textArray.count * i, _imageSize.width, _imageSize.height / textArray.count);
        CGFloat testFontSize = 0.1;
        while(1)
        {
            CGFloat deltaFontSize = 0.1;
            font = [UIFont systemFontOfSize:testFontSize];
            
            CGSize testSize = [text sizeWithFont:font];
            if(testSize.width >= drawingRect.size.width
               || testSize.height >= drawingRect.size.height)
            {
                font = [UIFont systemFontOfSize:testFontSize - deltaFontSize];
                break;
            }
            testFontSize += deltaFontSize;
        }
        [text drawInRect:drawingRect withFont:font];
    }
    
    textImage = UIGraphicsGetImageFromCurrentImageContext();
    NSLog(@"%f,%f",textImage.size.width,textImage.size.height);
    UIGraphicsEndImageContext();
    
    
    //image to pixels! textImage -> TextPixels
    [self ImageToPixels:pTextPixels byImage:textImage];
    return;
}

///http://stackoverflow.com/questions/448125/how-to-get-pixel-data-from-a-uiimage-cocoa-touch-or-cgimage-core-graphics////
-(void) ImageToPixels:(BytePtr*)pixels
              byImage:(UIImage*)image
{
    CGImageRef imageRef = image.CGImage;
    NSUInteger width = CGImageGetWidth(imageRef);
    NSUInteger height = CGImageGetHeight(imageRef);
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    *pixels = (BytePtr) calloc(image.size.height * image.size.width * 4, sizeof(Byte));
    for(int i=0; i<100; i++)
    {
    //   if((*pixels)[i] != 0) NSLog(@"AA%d %d",i,(*pixels)[i]);
    }
    NSUInteger bytesPerPixel = 4;
    NSUInteger bytesPerRow = bytesPerPixel * width;
    NSUInteger bitsPerComponent = 8;
    CGContextRef context = CGBitmapContextCreate(*pixels, width, height,
                                                 bitsPerComponent, bytesPerRow, colorSpace,
                                                 kCGImageAlphaPremultipliedLast);// | kCGBitmapByteOrder32Big);
    CGColorSpaceRelease(colorSpace);
    for(int i=0; i<100; i++)
    {
    //   if((*pixels)[i] != 0) NSLog(@"BB%d %d",i,(*pixels)[i]);
    }
    CGContextDrawImage(context, CGRectMake(0, 0, width, height), imageRef);
    CGContextRelease(context);
    for(int i=0; i<100; i++)
    {
    //    if((*pixels)[i] != 0) NSLog(@"CC%d %d",i,(*pixels)[i]);
    }
    return;
}

-(void)SetImagePixels:(BytePtr*)pImagePixels
           DataPixels:(BytePtr)dataPixels
           TextPixels:(BytePtr)textPixels
            ImageSize:(CGSize)imageSize
{
    ///DO MALLOC IMAGEPIXEL.
    // 32bit per pixel
    *pImagePixels = (BytePtr)malloc(sizeof(Byte) * 4 * (int)imageSize.width * imageSize.height+1);
    memset(*pImagePixels,0,sizeof(Byte) * 4 * (int)imageSize.width * imageSize.height+1);
    NSLog(@"%f",sizeof(Byte) * 4 * (int)imageSize.width * imageSize.height+1);
    for(int i=0; i+3<sizeof(Byte) * 4 * (int)imageSize.width * imageSize.height; i+=4)
    {
        if(d_Algorithm == ALGORITHM_DEFAULT_RGBA)
        {
            Byte r=0xC0,g=0xC0,b=0xC0,a=0x40;
            if(dataPixels[i+0] == 0x80 || dataPixels[i+1] == 0x80 ||
               dataPixels[i+2] == 0x80 || dataPixels[i+3] == 0x80)
            {
                r = g = b = a = 0x00;
                //NSLog(@"%d | %d = %d",dataPixels[i+0],b,dataPixels[i+0]|b);
                //NSLog(@"%d | %d = %d",dataPixels[i+1],a,dataPixels[i+1]|a);
                //NSLog(@"%d | %d = %d",dataPixels[i+2],b,dataPixels[i+2]|b);
                //NSLog(@"%d | %d = %d",dataPixels[i+3],a,dataPixels[i+3]|a);
            }
            if(textPixels[i+0]!= 0 ||textPixels[i+1]!= 0 ||textPixels[i+2]!= 0 ||textPixels[i+3]!= 0 )
            {
                r = g = b = 0x00;
                a = 0xC0;
            }
            (*pImagePixels)[i+0] = dataPixels[i+0] | r;
            (*pImagePixels)[i+1] = dataPixels[i+1] | g;
            (*pImagePixels)[i+2] = dataPixels[i+2] | b;
            (*pImagePixels)[i+3] = dataPixels[i+3] | a;
        }
        
        if(i==0) NSLog(@"first Image pixel's 0 pixel = %d",(*pImagePixels)[0]);
    }
    NSLog(@"%d",(*pImagePixels)[1]);
    NSLog(@"%d",(dataPixels)[1]);
    return;
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



-(NSArray*)LoadDataFromImage:(UIImage *)image
{
    if([savedArray isEqualToArray:[NSKeyedUnarchiver unarchiveObjectWithData:savedData]]) NSLog(@"equal");
    BytePtr pixels;
    uint pixelsLength = image.size.height * image.size.width * 4;
    NSLog(@"imageSize : %f,%f  length : %d",image.size.width,image.size.height,pixelsLength);
    /// image to pixels
    [self ImageToPixels:&pixels byImage:image];
    
    NSData *ddata = [NSData dataWithBytes:pixels length:628586];
    // NSLog(@"%@",ddata);
    
    /// 6bit -> 8bit < by algorithm
    uint changedLength = [self FilterOutTextDataFromPixels:&pixels PixelsLength:pixelsLength];
    NSLog(@"changed length: %d",changedLength);
    // pixels -> data
    NSData *data = [NSData dataWithBytes:pixels length:changedLength];
    //NSLog(@"filtered data : %@",data);
    NSLog(@"length s:%d d:%d",savedData.length, data.length);
    int length = data.length;
    /*for(int i=0; i<length; i+=1)
    {
        NSData *A = [NSData dataWithBytes:savedData length:i];
        NSData *B = [NSData dataWithBytes:data length:i];
        //NSLog(@"A:%@",A);
        //NSLog(@"B:%@",B);
        if([A isEqualToData:B] == YES)
            NSLog(@"%d equal",i);
    }*/
    if([savedData isEqualToData:data] == YES)
        NSLog(@"equal");
    /// unarchieve
    //NSLog(@"savedData : %@",savedData);
    NSArray *array = [NSKeyedUnarchiver unarchiveObjectWithData:data];
    if([array isEqualToArray:savedArray])NSLog(@"Eqaul");

    /// return nsarray.
    return array;
}

//return : changedLength
-(uint)FilterOutTextDataFromPixels:(BytePtr*)pixels PixelsLength:(uint)pixelsLength
{
    counted = 0;
    uint changedLength = 0;
    if(d_Algorithm == ALGORITHM_DEFAULT_RGBA)
    {
        Byte byte = 0;
        uint combineCount = 0;
        for(int i=0; i<pixelsLength; i++)
        {
            std::bitset<8>bs ((uint)(*pixels)[i]);
            int a1=bs[0];
            int a2=bs[1];
            int a3=bs[2];
            int a4=bs[3];
            int a5=bs[4];
            int a6=bs[5];
            int a7=bs[6];
            int a8=bs[7];
            //NSLog(@"%d%d%d%d%d%d%d%d",a1,a2,a3,a4,a5,a6,a7,a8);
            if(i == 0) NSLog(@"first 8 bit on pop is 1:%d 2:%d 3:%d 4:%d 5:%d 6:%d 7:%d 8:%d",a1,a2,a3,a4,a5,a6,a7,a8);
            if(bs[7] == 1 && bs[6]== 0)
            {
                if(byte != 0)
                    NSLog(@"CRITICAL_ERROR");
                NSLog(@"%d",counted);
                return changedLength;
            }
            for(int l=5; l>=0; l--)
            {
                byte *= 2;
                byte += bs[l];
                combineCount++;
                if(combineCount >= 8 )
                {
                    if(changedLength == 0) NSLog(@"first filter byte : %d",byte);
                    if(changedLength < 1000000)
                    {
                        //NSLog(@"%d/%d : %d , %d ",byte==savedPixels[changedLength],changedLength,byte,savedPixels[changedLength]);
                        if(byte!=savedPixels[changedLength])
                            counted++;// NSLog(@"WOWOW %d",counted++);
                    }
                    (*pixels)[changedLength] = byte;
                    byte = 0;
                    combineCount = 0;
                    changedLength++;
                }
            }
        }
        if(combineCount > 0)
        {
            (*pixels)[changedLength] = byte;
            byte = 0;
            combineCount = 0;
            changedLength++;
            
        }
    }
    NSLog(@"%d",counted);
    return changedLength;
}
@end

